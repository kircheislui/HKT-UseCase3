---
- name: Check IP and MAC Addresses on All Network Devices
  hosts: network_devices
  gather_facts: false
  connection: ansible.netcommon.network_cli
  become: yes
  become_method: ansible.netcommon.enable

  tasks:
    # --- IP ADDRESS GATHERING ---
    - name: Set the correct IP command based on the device OS
      ansible.builtin.set_fact:
        ip_command: "{{ 'show ip interface brief' if 'cisco.ios' in ansible_network_os else 'display ip interface brief' }}"

    - name: DEBUG - Show the determined IP command
      ansible.builtin.debug:
        msg: "Running IP command: {{ ip_command }}"

    - name: Run command to get IP interface details
      ansible.netcommon.cli_command:
        command: "{{ ip_command }}"
      register: interface_output

    - name: DEBUG - Show raw IP command output
      ansible.builtin.debug:
        var: interface_output.stdout_lines

    - name: Filter for lines containing an IP address
      ansible.builtin.set_fact:
        ip_address_lines: "{{ interface_output.stdout_lines | select('regex', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}') | list }}"

    - name: FINAL - Display found IP addresses
      ansible.builtin.debug:
        msg: "{{ ip_address_lines }}"

    # --- ARP/MAC ADDRESS GATHERING ---
    - name: Set the correct ARP command based on the device OS
      ansible.builtin.set_fact:
        mac_command: "{{ 'show arp' if 'cisco.ios' in ansible_network_os else 'display arp' }}"

    - name: DEBUG - Show the determined ARP/MAC command
      ansible.builtin.debug:
        msg: "Running ARP/MAC command: {{ mac_command }}"

    - name: Disable pagination on H3C devices
      ansible.netcommon.cli_command:
        command: "screen-length disable"
      when: "'h3c_open.comware' in ansible_network_os"

    - name: Run command to get ARP details
      ansible.netcommon.cli_command:
        command: "{{ mac_command }}"
      register: mac_output

    - name: DEBUG - Show raw ARP/MAC command output
      ansible.builtin.debug:
        var: mac_output.stdout_lines

    - name: Filter for lines containing a MAC address
      ansible.builtin.set_fact:
        mac_address_lines: "{{ mac_output.stdout_lines | select('regex', '([0-9a-f]{4}\\.[0-9a-f]{4}\\.[0-9a-f]{4})|([0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4})') | list }}"

    - name: FINAL - Display found MAC addresses
      ansible.builtin.debug:
        msg: "{{ mac_address_lines }}"