---
- name: Perform configuration remediation
  block:
    - name: Get remediation commands for vendor
      set_fact:
        vendor_remediation_commands: "{{ remediation_commands[vendor_baseline_dir] | default([]) }}"

    - name: Debug remediation preparation
      debug:
        msg: |
          ========================================
          üîß REMEDIATION MODE ACTIVATED
          ========================================
          Device: {{ inventory_hostname }}
          Vendor: {{ vendor_baseline_dir }}
          Available remediation commands: {{ vendor_remediation_commands | length }}
          Drift detected: {{ overall_device_drift }}
          Missing configs: {{ device_drift_analysis.missing_configs | length }}
          Different configs: {{ device_drift_analysis.different_configs | length }}
          ========================================

    - name: Check if remediation commands available
      debug:
        msg: "‚ö†Ô∏è WARNING: No remediation commands found for vendor {{ vendor_baseline_dir }}"
      when: vendor_remediation_commands | length == 0

    - name: Display remediation commands to be applied
      debug:
        msg: |
          Commands to be applied:
          {{ vendor_remediation_commands | join('\n') }}
      when: 
        - vendor_remediation_commands | length > 0
        - ansible_verbosity >= 1

    - name: Apply remediation commands
      cli_config:
        config: "{{ vendor_remediation_commands | join('\n') }}"
      register: remediation_result
      when: vendor_remediation_commands | length > 0

    - name: Save configuration after remediation (Cisco)
      cli_command:
        command: "write memory"
      when:
        - vendor_remediation_commands | length > 0
        - remediation_result.changed | default(false)
        - normalized_network_os in ['ios', 'nxos', 'eos']
      ignore_errors: yes

    - name: Update remediation status
      set_fact:
        remediated_devices: "{{ remediated_devices + [inventory_hostname] }}"
      delegate_to: localhost
      when: 
        - remediation_result is defined
        - remediation_result.changed | default(false)

    - name: Update drift results with remediation status
      set_fact:
        drift_results: "{{ drift_results | map('combine', updated_result if item.hostname == inventory_hostname else {}) | list }}"
      vars:
        updated_result:
          remediated: true
          remediation_timestamp: "{{ ansible_date_time.iso8601 | default(now().strftime('%Y-%m-%dT%H:%M:%SZ')) }}"
          remediation_successful: true
      loop: "{{ drift_results }}"
      loop_control:
        loop_var: item
      delegate_to: localhost
      when: 
        - remediation_result is defined
        - remediation_result.changed | default(false)

    - name: Wait for device to settle after remediation
      pause:
        seconds: 5
      when:
        - remediation_result is defined
        - remediation_result.changed | default(false)

    - name: Verify configuration after remediation
      cli_command:
        command: "{{ show_run_commands[normalized_network_os] | default('show running-config') }}"
      register: post_remediation_config
      vars:
        show_run_commands:
          ios: "show running-config"
          nxos: "show running-config"
          eos: "show running-config"
          comware: "display current-configuration"
          ce: "display current-configuration"
          vrp: "display current-configuration"
      when:
        - remediation_result is defined
        - remediation_result.changed | default(false)

    - name: Save post-remediation configuration backup
      copy:
        content: "{{ post_remediation_config.stdout }}"
        dest: "{{ backup_directory }}/{{ backup_date }}/{{ inventory_hostname }}_post_remediation_config.txt"
      delegate_to: localhost
      when:
        - post_remediation_config is defined
        - post_remediation_config.stdout is defined

    - name: Re-analyze drift after remediation
      include_tasks: analyze_drift_post.yml
      vars:
        running_config_data: "{{ post_remediation_config }}"
      when: 
        - post_remediation_config is defined
        - post_remediation_config.stdout is defined

  rescue:
    - name: Handle remediation failure
      set_fact:
        failed_devices: "{{ failed_devices + [inventory_hostname] }}"
      delegate_to: localhost

    - name: Update drift results with remediation failure
      set_fact:
        drift_results: "{{ drift_results | map('combine', updated_result if item.hostname == inventory_hostname else {}) | list }}"
      vars:
        updated_result:
          remediated: false
          remediation_successful: false
          remediation_error: "{{ ansible_failed_result.msg | default('Unknown error during remediation') }}"
          remediation_timestamp: "{{ ansible_date_time.iso8601 | default(now().strftime('%Y-%m-%dT%H:%M:%SZ')) }}"
      loop: "{{ drift_results }}"
      loop_control:
        loop_var: item
      delegate_to: localhost

    - name: Debug remediation failure
      debug:
        msg: |
          ‚ùå REMEDIATION FAILED
          ========================================
          Device: {{ inventory_hostname }}
          Error: {{ ansible_failed_result.msg | default('Unknown error') }}
          ========================================