---
- name: Debug network OS detection
  debug:
    msg: "Device: {{ inventory_hostname }}, Network OS: {{ ansible_network_os }}"

- block:
    - name: Normalize network OS for command lookup
      set_fact:
        normalized_network_os: "{{ (ansible_network_os | default('ios')).split('.')[-1] }}"

    - name: Debug normalized network OS
      debug:
        msg: "Normalized Network OS: {{ normalized_network_os }}"

    - name: Determine vendor baseline directory
      set_fact:
        vendor_baseline_dir: "{{ vendor_mapping[normalized_network_os] | default('unknown') }}"
      vars:
        vendor_mapping:
          ios: "cisco"
          eos: "cisco"
          nxos: "cisco"
          comware: "h3c"
          ce: "huawei"
          vrp: "huawei"

    - name: Debug expected baseline file path
      debug:
        msg: "Expected baseline file for vendor {{ vendor_baseline_dir }}: {{ baseline_config_dir }}/{{ vendor_baseline_dir }}/baseline_config.txt"
      when: baseline_config_dir is defined

    - name: Retrieve running configuration from local file
      set_fact:
        running_config:
          stdout: "{{ config_content.stdout | join('\n') }}"
      vars:
        config_files:
          ios: "cisco-ios_config.txt"
          nxos: "cisco-ios_config.txt"
          eos: "cisco-ios_config.txt"
          comware: "h3c_open-comware_config.txt"
          ce: "huawei_config.txt.txt"
          vrp: "huawei_config.txt.txt"
        file_path: "{{ downloaded_configs_dir }}/{{ config_files[normalized_network_os] | default('unknown_config.txt') }}"
        config_json: "{{ lookup('file', file_path) | from_json }}"
        config_content: "{{ config_json }}"
      when: downloaded_configs_dir is defined

    - name: Create local backup of running configuration
      copy:
        content: "{{ running_config.stdout }}"
        dest: "{{ backup_directory }}/{{ backup_date }}/{{ inventory_hostname }}_running_config.txt"
      delegate_to: localhost
      when: perform_backup | bool

    - name: Load baseline configuration for device
      set_fact:
        device_baseline_config: "{{ lookup('file', baseline_config_dir + '/' + vendor_baseline_dir + '/baseline_config.txt') | default('') }}"
      when: baseline_config_dir is defined and vendor_baseline_dir != 'unknown'

    - name: Debug loaded baseline content
      debug:
        msg: |
          Device: {{ inventory_hostname }}
          Baseline file: {{ baseline_config_dir }}/{{ vendor_baseline_dir }}/baseline_config.txt
          Content: {{ device_baseline_config | default('EMPTY') }}
          Lines: {{ device_baseline_config.split('\n') | length if device_baseline_config | length > 0 else 0 }}
      when: baseline_config_dir is defined and vendor_baseline_dir != 'unknown'

    - name: Initialize drift analysis
      set_fact:
        device_has_baseline: "{{ device_baseline_config | length > 0 }}"
        overall_device_drift: false

    - name: Analyze configuration drift
      include_tasks: analyze_drift.yml
      when: 
        - device_baseline_config | length > 0

    - name: Set no drift when no baseline available
      set_fact:
        device_drift_analysis:
          has_drift: false
          summary: "No baseline configuration found"
          missing_configs: []
          different_configs: []
          extra_configs: []
          baseline_lines: 0
        overall_device_drift: false
      when: not device_has_baseline

    - name: Record comprehensive drift results for each device
      set_fact:
        drift_results: "{{ (hostvars['localhost'].drift_results | default([])) + [device_result] }}"
      vars:
        device_result:
          hostname: "{{ inventory_hostname }}"
          network_os: "{{ normalized_network_os }}"
          vendor: "{{ vendor_baseline_dir }}"
          has_drift: "{{ overall_device_drift }}"
          baseline_found: "{{ device_has_baseline }}"
          drift_details: "{{ device_drift_analysis }}"
          remediated: false
          backup_created: "{{ perform_backup | bool }}"
          error: null
          scan_timestamp: "{{ ansible_date_time.iso8601 | default(now().strftime('%Y-%m-%dT%H:%M:%SZ')) }}"
      delegate_to: localhost

    - name: Display drift status
      debug:
        msg: |
          Device: {{ inventory_hostname }} ({{ normalized_network_os }})
          Vendor: {{ vendor_baseline_dir }}
          Baseline found: {{ device_has_baseline }}
          Has drift: {{ overall_device_drift }}
          Missing configs: {{ device_drift_analysis.missing_configs | default([]) | length }}
          Different configs: {{ device_drift_analysis.different_configs | default([]) | length }}

  rescue:
    - name: Record failed device
      set_fact:
        failed_devices: "{{ (hostvars['localhost'].failed_devices | default([])) + [inventory_hostname] }}"
      delegate_to: localhost

    - name: Debug failure
      debug:
        msg: "Failed to process device {{ inventory_hostname }} ({{ normalized_network_os | default('unknown') }}): {{ ansible_failed_result.msg | default('Unknown error') }}"

    - name: Record partial result for failed device
      set_fact:
        drift_results: "{{ (hostvars['localhost'].drift_results | default([])) + [{'hostname': inventory_hostname, 'network_os': normalized_network_os | default('unknown'), 'has_drift': null, 'baseline_found': false, 'drift_details': {'summary': 'Scan failed'}, 'error': ansible_failed_result.msg | default('Unknown error')}] }}"
      delegate_to: localhost

    - name: Debug processed devices
      debug:
        msg: "Processed devices in drift_results: {{ hostvars['localhost'].drift_results | default([]) | length }}, Failed devices: {{ hostvars['localhost'].failed_devices | default([]) | length }}"
      delegate_to: localhost