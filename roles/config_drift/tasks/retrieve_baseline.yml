---
- name: Debug baseline_config_dir value
  debug:
    msg: "baseline_config_dir is set to: {{ baseline_config_dir | default('UNDEFINED - PLEASE DEFINE IN VARS') }}"
  delegate_to: localhost  # Added to confirm the dir path is set correctly

- name: Debug baseline_config_dir contents
  shell: ls -R {{ baseline_config_dir }} || echo "Directory not found or empty"
  register: dir_contents
  delegate_to: localhost
  ignore_errors: true  # Added to list files recursively and show structure

- name: Display directory contents
  debug:
    var: dir_contents.stdout  # Shows if subdirs (cisco, h3c, huawei) and baseline_config.txt exist

- name: Check if baseline files exist and are non-empty
  stat:
    path: "{{ baseline_config_dir }}/{{ item }}/baseline_config.txt"
  loop:
    - cisco
    - h3c
    - huawei
  register: file_stats
  delegate_to: localhost  # Added to check each file's existence and size

- name: Display file status
  debug:
    msg: "Vendor {{ item.item }} baseline file exists: {{ item.stat.exists }}, size: {{ item.stat.size | default(0) }} bytes"
  loop: "{{ file_stats.results }}"  # Shows if each baseline_config.txt is found and non-empty

- name: Create baseline directory structure if not exists
  file:
    path: "{{ baseline_config_dir }}/{{ item }}"
    state: directory
  loop:
    - cisco
    - h3c
    - huawei
  delegate_to: localhost

- name: Find all baseline configuration files
  find:
    paths: "{{ baseline_config_dir }}"
    patterns:
      - "baseline_config.txt"
    recurse: yes
  register: all_baseline_files
  delegate_to: localhost

- name: Initialize baseline configs dictionary
  set_fact:
    baseline_configs: {}

- name: Load baseline configurations by vendor
  set_fact:
    baseline_configs: "{{ baseline_configs | combine({vendor: config_content}) }}"
  vars:
    vendor: "{{ item.path | dirname | basename }}"
    config_content: "{{ lookup('file', item.path) }}"
  loop: "{{ all_baseline_files.files }}"
#  delegate_to: localhost
  when: all_baseline_files.files | length > 0

- name: Find remediation command files
  find:
    paths: "{{ baseline_config_dir }}"
    patterns: "remediation_commands.txt"
    recurse: yes
  register: remediation_files
  delegate_to: localhost

- name: Load remediation commands
  set_fact:
    remediation_commands: "{{ remediation_commands | default({}) | combine({vendor: remediation_content.split('\n') | reject('match', '^#.*') | reject('equalto', '') | list}) }}"
  vars:
    vendor: "{{ item.path | dirname | basename }}"
    remediation_content: "{{ lookup('file', item.path) }}"
  loop: "{{ remediation_files.files }}"
  delegate_to: localhost
  when: remediation_files.files | length > 0

- name: Debug loaded configurations
  debug:
    msg: |
      ========================================
      ðŸ“š BASELINE CONFIGURATIONS LOADED
      ========================================
      Loaded baseline vendors: {{ baseline_configs.keys() | list }}
      Available remediation commands: {{ remediation_commands.keys() | default([]) | list }}
      
      Baseline sizes:
      {% for vendor, content in baseline_configs.items() %}
      - {{ vendor }}: {{ content.split('\n') | length }} lines
      {% endfor %}
      ========================================